import { NextRequest, NextResponse } from 'next/server'
import { HybridCrawler } from '@/lib/hybrid-crawler'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ API Crawler H√≠brido iniciada...')
    
    // Verificar se √© uma requisi√ß√£o autorizada (voc√™ pode adicionar autentica√ß√£o aqui)
    const authHeader = request.headers.get('authorization')
    
    // Para desenvolvimento, aceitar qualquer requisi√ß√£o
    // Em produ√ß√£o, implementar autentica√ß√£o adequada
    if (process.env.NODE_ENV === 'production' && !authHeader) {
      console.log('‚ùå N√£o autorizado em produ√ß√£o')
      return NextResponse.json(
        { error: 'N√£o autorizado' },
        { status: 401 }
      )
    }

    console.log('‚úÖ Autentica√ß√£o aprovada')
    console.log('üîÑ Iniciando execu√ß√£o do crawler h√≠brido...')
    
    const crawler = new HybridCrawler()
    await crawler.runCrawler()
    
    console.log('‚úÖ Crawler h√≠brido executado com sucesso')
    
    return NextResponse.json({
      success: true,
      message: 'Crawler h√≠brido executado com sucesso',
      timestamp: new Date().toISOString()
    })
    
  } catch (error) {
    console.error('‚ùå Erro ao executar crawler h√≠brido:', error)
    console.error('Stack trace:', error instanceof Error ? error.stack : 'N/A')
    
    return NextResponse.json(
      { 
        error: 'Erro interno do servidor',
        details: error instanceof Error ? error.message : 'Erro desconhecido',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    // Endpoint para verificar status do crawler
    const { searchParams } = request.nextUrl
    const action = searchParams.get('action')
    
    if (action === 'status') {
      // Aqui voc√™ pode implementar verifica√ß√£o de status
      return NextResponse.json({
        status: 'ready',
        lastRun: new Date().toISOString(),
        message: 'Crawler h√≠brido est√° pronto para execu√ß√£o'
      })
    }
    
    return NextResponse.json({
      message: 'Crawler H√≠brido API - Use POST para executar o crawler'
    })
    
  } catch (error) {
    console.error('Erro ao verificar status do crawler:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
